# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main

jobs:
  test-ios:
    runs-on: macos-latest
    env:
      SCHEME: 'OpenWeather'

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Set up Xcode
    - name: Select Xcode Version 
      run: sudo xcode-select -s /Applications/Xcode_15.4.app

    # Install xcpretty
    - name: Install xcpretty
      run: gem install xcpretty

    # # Build the project
    # - name: Build Project for scheme  ${{ env.SCHEME }}
    #   run: |
    #     xcodebuild clean build \
    #       -scheme ${{ env.SCHEME }} \
    #       -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.5' \
    #       CODE_SIGNING_ALLOWED=NO \
    #       ONLY_ACTIVE_ARCH=NO \
    #       EXCLUDED_ARCHS=arm64 \
    #       > /dev/null 2>&1

    # Set up Derived Data Directory
    - name: Set up Derived Data Directory
      run: |
        export ABSOLUTE_DERIVED_DATA=/tmp/DerivedData
        mkdir -p $ABSOLUTE_DERIVED_DATA
        echo "Using Derived Data Path: $ABSOLUTE_DERIVED_DATA"
        echo "ABSOLUTE_DERIVED_DATA=$ABSOLUTE_DERIVED_DATA" >> $GITHUB_ENV

    # Run tests on iPhone 15 Simulator with iOS 17.5
    - name: Run Tests on iPhone 15 Simulator (iOS 17.5) for scheme  ${{ env.SCHEME }}
      run: |
        xcodebuild clean test \
          -scheme  ${{ env.SCHEME }} \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.5' \
          -only-testing:OpenWeatherTests \
          -enableCodeCoverage YES \
          -derivedDataPath $ABSOLUTE_DERIVED_DATA \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO \
          EXCLUDED_ARCHS=arm64 \
          | xcpretty -r html --output report.html
      env:
        NSUnbufferedIO: "YES"
        ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}
    
    # Debug Derived Data Contents
    - name: Debug Derived Data Contents
      run: |
        echo "Contents of Derived Data Logs/Test:"
        ls -R $ABSOLUTE_DERIVED_DATA/Logs/Test || echo "No test logs found!"
      env:
        ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}

    # Uploading test report
    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      with:
        name: Test Report
        path: report.html

    # Generate and upload coverage reports (text and json)
    - name: Generate Coverage Report
      run: |
        xcrun xccov view --report $(find $ABSOLUTE_DERIVED_DATA/Logs/Test -name '*.xccovreport') > coverage-report.txt
      env:
        ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}

    - name: Generate JSON Coverage Report
      run: |
        xcrun xccov view --json $(find $ABSOLUTE_DERIVED_DATA/Logs/Test -name '*.xccovreport') > coverage-report.json
      env:
        ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}

    # Upload coverage reports
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: Coverage Report
        path: |
          coverage-report.txt
          coverage-report.json