# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main

jobs:
  test-ios:
    runs-on: macos-latest
    env:
      SCHEME: 'OpenWeather'

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Set up Xcode
    - name: Select Xcode Version 
      run: sudo xcode-select -s /Applications/Xcode_15.4.app

    # Install xcpretty
    - name: Install xcpretty
      run: gem install xcpretty

    # Run tests on iPhone 15 Simulator with iOS 17.5
    - name: Run Tests on iPhone 15 Simulator (iOS 17.5) for scheme  ${{ env.SCHEME }}
      run: |
        set -o pipefail && xcodebuild clean test \
          -scheme  ${{ env.SCHEME }} \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.5' \
          -only-testing:OpenWeatherTests \
          -enableCodeCoverage YES \
          -resultBundlePath Tests.xcresult \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO \
          EXCLUDED_ARCHS=arm64 \
          | xcpretty -r html --output report.html
      env:
        NSUnbufferedIO: "YES"

    # Uploading test report
    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      if: ${{ success() || failure() }}
      with:
        name: Test Report
        path: report.html

    # Upload xcresult file
    - name: Upload xcresult file
      uses: actions/upload-artifact@v4
      if: ${{ success() || failure() }}
      with:
        name: Tests-${{ github.run_number }}.xcresult
        path: Tests.xcresult

    # Getting Code Coverage Data
    - name: Genetarate Code Coverage Data
      run: |
        echo "Generating code coverage data from Tests.xcresult"
        xcrun xccov view --report Tests.xcresult --json > code_coverage.json

    

    # # Getting Code Coverage Data
    # - name: Genetarate Code Coverage Data
    #   run: |
    #     echo "Generating code coverage data from $ABSOLUTE_DERIVED_DATA/Logs/Test/*.xccovreport"
    #     xcrun xccov view --report $(find $ABSOLUTE_DERIVED_DATA/Logs/Test -name '*.xcresult') --json > code_coverage.json

    # # Uploading Code Coverage Data
    # - name: Upload Code Coverage Data
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: Code Coverage Data
    #     path: |
    #       codecov.json
    
    # # Generating Code Coverage Report with xcparse
    # - name: Generate Code Coverage Report
    #   run: xcparse codecov $ABSOLUTE_DERIVED_DATA/Logs/Test/*.xcresult $ABSOLUTE_DERIVED_DATA/Logs/Test/exportCodeCoverageFiles
    
    # # Uploading Code Coverage Report
    # - name: Upload Code Coverage Report
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: Code Coverage Report
    #     path: exportCodeCoverageFiles
