# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main

jobs:
  test-ios:
    runs-on: macos-latest
    env:
      SCHEME: 'OpenWeather'
      # ABSOLUTE_DERIVED_DATA: /tmp/DerivedData
    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Set up Xcode
    - name: Select Xcode Version 
      run: sudo xcode-select -s /Applications/Xcode_15.4.app

    # Install xcpretty
    - name: Install xcpretty
      run: gem install xcpretty

    # Set up Derived Data Directory
    - name: Set up Derived Data Directory
      run: |
        export ABSOLUTE_DERIVED_DATA=/tmp/DerivedData
        mkdir -p $ABSOLUTE_DERIVED_DATA
        echo "Using Derived Data Path: $ABSOLUTE_DERIVED_DATA"
        echo "ABSOLUTE_DERIVED_DATA=$ABSOLUTE_DERIVED_DATA" >> $GITHUB_ENV

    # Run tests on iPhone 15 Simulator with iOS 17.5
    - name: Run Tests on iPhone 15 Simulator (iOS 17.5) for scheme  ${{ env.SCHEME }}
      run: |
        set -o pipefail && xcodebuild clean test \
          -scheme  ${{ env.SCHEME }} \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.5' \
          -only-testing:OpenWeatherTests \
          -enableCodeCoverage YES \
          -derivedDataPath $ABSOLUTE_DERIVED_DATA \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO \
          EXCLUDED_ARCHS=arm64 \
          | xcpretty -r html --output report.html
      env:
        NSUnbufferedIO: "YES"
        ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}
    # | xcpretty -r html --output report.html 

    # # Upload Code Coverage Data
    # - name: Upload Code Coverage Data
    #   uses: codecov/codecov-action@v4
    #   with:
    #     name: codecoverage-data
    #     token: ${{ secrets.CODECOV_TOKEN }}

    # Uploading test report
    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      with:
        name: Test Report
        path: report.html

    # Getting Code Coverage Data
    - name: Genetarate Code Coverage Data
      run: |
        echo "Generating code coverage data from $ABSOLUTE_DERIVED_DATA/Logs/Test/*.xccovreport"
        xcrun xccov view --report $ABSOLUTE_DERIVED_DATA/Logs/Test/*.xccovreport > codecov.txt
        xcrun xccov view --json $ABSOLUTE_DERIVED_DATA/Logs/Test/*.xccovreport > codecov.json

    # Uploading Code Coverage Data
    - name: Upload Code Coverage Data
      uses: actions/upload-artifact@v4
      with:
        name: Code Coverage Data
        path: |
          codecov.txt
          codecov.json

    # # Rename .xcresult file to XcodeReport.xcresult
    # - name: Extract .xcresult File
    #   run: |
    #     mv $ABSOLUTE_DERIVED_DATA/Logs/Test/Run-*.xcresult $ABSOLUTE_DERIVED_DATA/Logs/Test/XcodeReport.xcresult
    #     echo "Renamed .xcresult file to XcodeReport.xcresult"
    #     echo "File position: $ABSOLUTE_DERIVED_DATA/Logs/Test/XcodeReport.xcresult"
    #   env:
    #     ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}
        
    # # Generate and upload coverage data
    # - name: Extract Coverage Data
    #   run: |
    #     xcrun xcresulttool get --path $ABSOLUTE_DERIVED_DATA/Logs/Test/XcodeReport.xcresult --format json > coverage.json
    #     echo "Generated JSON coverage report"
    #   env:
    #     ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}
  
    # # Upload .xcresult file
    # - name: Upload Xcode .xcresult file
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: XcodeReport.xcresult
    #     path: $ABSOLUTE_DERIVED_DATA/Logs/Test/XcodeReport.xcresult
    #   env:
    #     ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}
    
    # # Upload .json file
    # - name: Upload JSON report file
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: coverage.json
    #     path: $ABSOLUTE_DERIVED_DATA/Logs/Test/coverage.json
    #   env:
    #     ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}

    # # Debug Derived Data Contents
    # - name: Debug Derived Data Contents
    #   run: |
    #     echo "Contents of Derived Data $ABSOLUTE_DERIVED_DATA/Logs/Test:"
    #     ls $ABSOLUTE_DERIVED_DATA/Logs/Test || echo "No test logs found!"
    #   env:
    #     ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}

    # # Generate and upload coverage reports (text and json)
    # - name: Generate Coverage Report
    #   run: |
    #     xcrun xccov view --report $(find $ABSOLUTE_DERIVED_DATA/Logs/Test -name '*.xccovreport') > coverage-report.txt
    #   env:
    #     ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}

    # - name: Generate JSON Coverage Report
    #   run: |
    #     xcrun xccov view --json $(find $ABSOLUTE_DERIVED_DATA/Logs/Test -name '*.xccovreport') > coverage-report.json
    #   env:
    #     ABSOLUTE_DERIVED_DATA: ${{ env.ABSOLUTE_DERIVED_DATA }}

    # # Upload coverage reports
    # - name: Upload Coverage Report
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: Coverage Report
    #     path: |
    #       coverage-report.txt
    #       coverage-report.json
